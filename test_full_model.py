import torch
from utils import load_checkpoint, load_watermark_image, generate_zero_watermark, save_image
from generate_key import load_key
import config
from generator_model import Generator
from watermark_extraction import WatermarkExtractionModel
from dataset import MapDataset
from torch.utils.data import DataLoader
import torch.optim as optim


def test_model():
    # Initialize models
    gen = Generator(in_channels=3, features=64).to(config.DEVICE)
    extraction_model = WatermarkExtractionModel().to(config.DEVICE)
    opt_gen = optim.Adam(list(gen.parameters()) + list(extraction_model.parameters()), lr=config.LEARNING_RATE, betas=(0.5, 0.999))

    # Load checkpoints
    load_checkpoint(f"checkpoints/_epoch400_{config.CHECKPOINT_GEN}", gen, optimizer=opt_gen, lr=config.LEARNING_RATE)
    load_checkpoint(f"checkpoints/_epoch400_extraction_model.pth.tar", extraction_model, optimizer=opt_gen, lr=config.LEARNING_RATE)
    
    # Load the validation dataset
    val_dataset = MapDataset(root_dir=config.VAL_DIR)
    val_loader = DataLoader(val_dataset, batch_size=1, shuffle=False)

    # Load a sample image from the validation dataset
    sample_image, i = next(iter(val_loader))
    sample_image = sample_image.to(config.DEVICE)

    # Generate the fake image using the generator
    gen.eval()
    with torch.no_grad():
        generated_image = gen(sample_image)

    # Extract the watermark from the generated image
    extraction_model.eval()
    with torch.no_grad():
        extracted_watermark = extraction_model(generated_image, load_key())

    # now load an image from the dataset (that was not generated by the generator) and extract the watermark
    _, sample_image = next(iter(val_loader))
    sample_image = sample_image.to(config.DEVICE)

    # Extract the watermark from the sample image
    with torch.no_grad():
        extracted_watermark_sample = extraction_model(sample_image, load_key())

    # resize it to the same size as the generated image


    # Save the output images for inspection
    save_image(generated_image, "output/generated_image.png")
    save_image(extracted_watermark, "output/extracted_watermark.png")

    save_image(sample_image, "output/sample_image.png")
    save_image(extracted_watermark_sample, "output/extracted_watermark_sample.png")

    print("Generated image and extracted watermark have been saved to the output folder.")

if __name__ == "__main__":
    test_model()
